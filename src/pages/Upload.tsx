
import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Textarea } from "@/components/ui/textarea";
import { ArrowRight, MessageSquare, Trash2 } from "lucide-react";
import Header from "@/components/Header";
import FileUpload from "@/components/FileUpload";
import useLocalStorage from "@/hooks/useLocalStorage";
import { toast } from "sonner";
import { useNavigate } from "react-router-dom";
import { v4 as uuidv4 } from "uuid";

interface ResumeSection {
  id: string;
  title: string;
  content: string;
}

const Upload = () => {
  const navigate = useNavigate();
  const [resumeFile, setResumeFile] = useState<File | null>(null);
  const [jobDescriptionFile, setJobDescriptionFile] = useState<File | null>(null);
  const [jobDescriptionText, setJobDescriptionText] = useState("");
  const [resumeSections, setResumeSections] = useLocalStorage<ResumeSection[]>("resumeSections", []);

  const handleFileUpload = (file: File) => {
    setResumeFile(file);
    
    // In a real application, we would parse the file content
    // For now, let's just simulate creating sections from an uploaded file
    const mockResumeSections = [
      {
        id: uuidv4(),
        title: "Kinh nghi·ªám l√†m vi·ªác",
        content: "Senior Developer t·∫°i ABC Tech (2018-Hi·ªán t·∫°i)\n‚Ä¢ ƒê√£ l√†m vi·ªác v·ªõi React v√† TypeScript ƒë·ªÉ ph√°t tri·ªÉn ·ª©ng d·ª•ng web\n‚Ä¢ ƒê√£ th·ª±c hi·ªán t√°i c·∫•u tr√∫c codebase v√† t·ªëi ∆∞u h√≥a hi·ªáu su·∫•t\n\nDeveloper t·∫°i XYZ Solutions (2015-2018)\n‚Ä¢ Ph√°t tri·ªÉn c√°c ·ª©ng d·ª•ng web s·ª≠ d·ª•ng JavaScript v√† jQuery\n‚Ä¢ H·ª£p t√°c v·ªõi ƒë·ªôi ng≈© thi·∫øt k·∫ø ƒë·ªÉ t·∫°o giao di·ªán ng∆∞·ªùi d√πng"
      },
      {
        id: uuidv4(),
        title: "H·ªçc v·∫•n",
        content: "C·ª≠ nh√¢n Khoa h·ªçc M√°y t√≠nh\nƒê·∫°i h·ªçc ABC (2011-2015)\nT·ªët nghi·ªáp lo·∫°i gi·ªèi"
      },
      {
        id: uuidv4(),
        title: "K·ªπ nƒÉng",
        content: "JavaScript, TypeScript, React, Node.js, HTML, CSS, Git, Agile"
      }
    ];
    
    setResumeSections(mockResumeSections);
    toast.success("CV ƒë√£ ƒë∆∞·ª£c t·∫£i l√™n v√† ph√¢n t√≠ch th√†nh c√¥ng");
  };

  const handleJobDescriptionFileUpload = (file: File) => {
    setJobDescriptionFile(file);
    
    // Simulate reading the file content
    setJobDescriptionText("Position: Senior Frontend Developer\n\nResponsibilities:\n‚Ä¢ Develop and maintain web applications using React, TypeScript, and GraphQL\n‚Ä¢ Collaborate with designers and backend developers\n‚Ä¢ Create reusable UI components\n\nRequirements:\n‚Ä¢ 3+ years of experience with React\n‚Ä¢ Strong knowledge of JavaScript and TypeScript\n‚Ä¢ Experience with GraphQL and RESTful APIs\n‚Ä¢ Experience with version control systems like Git\n‚Ä¢ Knowledge of Docker is a plus");
    
    toast.success("M√¥ t·∫£ c√¥ng vi·ªác ƒë√£ ƒë∆∞·ª£c t·∫£i l√™n th√†nh c√¥ng");
  };

  const handleClearResume = () => {
    setResumeFile(null);
    setResumeSections([]);
    localStorage.removeItem("resumeSections");
    localStorage.removeItem("resumeSectionsForEval");
    localStorage.removeItem("resumeSectionsForInterview");
    toast.success("ƒê√£ x√≥a CV th√†nh c√¥ng");
  };

  const handleClearJobDescription = () => {
    setJobDescriptionFile(null);
    setJobDescriptionText("");
    localStorage.removeItem("jobDescription");
    toast.success("ƒê√£ x√≥a m√¥ t·∫£ c√¥ng vi·ªác th√†nh c√¥ng");
  };

  const handleEvaluate = () => {
    // Check if resume sections exist
    if (resumeSections.length === 0) {
      toast.error("Vui l√≤ng t·∫£i l√™n CV tr∆∞·ªõc");
      return;
    }
    
    // Save to localStorage for use in evaluation page
    localStorage.setItem("resumeSectionsForEval", JSON.stringify(resumeSections));
    localStorage.setItem("jobDescription", jobDescriptionText);
    
    // Navigate to evaluation page
    navigate("/evaluation");
  };

  const handleStartMockInterview = () => {
    // Save to localStorage for use in mock interview if resume exists
    if (resumeSections.length > 0) {
      localStorage.setItem("resumeSectionsForInterview", JSON.stringify(resumeSections));
    }
    
    // Navigate to mock interview page
    navigate("/mock-interview");
  };

  return (
    <div className="min-h-screen flex flex-col">
      <Header />
      
      <main className="flex-1 container max-w-5xl mx-auto px-4 py-8">
        <h1 className="text-3xl font-bold mb-8 text-center">T·∫£i l√™n h·ªì s∆° c·ªßa b·∫°n</h1>
        
        <div className="grid md:grid-cols-2 gap-8 mb-8">
          {/* Resume Upload Section */}
          <div className="space-y-6">
            <div className="flex items-center justify-between">
              <h2 className="text-xl font-semibold">H·ªì s∆° c·ªßa b·∫°n</h2>
              {resumeSections.length > 0 && (
                <Button 
                  onClick={handleClearResume}
                  variant="outline" 
                  size="sm" 
                  className="gap-2 text-red-600 hover:text-red-700"
                >
                  <Trash2 className="h-4 w-4" />
                  X√≥a CV
                </Button>
              )}
            </div>
            
            <FileUpload
              acceptedTypes=".pdf,.doc,.docx"
              onFileUpload={handleFileUpload}
              label="T·∫£i l√™n CV c·ªßa b·∫°n"
            />
            
            {resumeSections.length > 0 && (
              <div className="p-4 bg-green-50 border border-green-200 rounded-lg">
                <p className="text-green-800 font-medium">‚úì CV ƒë√£ ƒë∆∞·ª£c t·∫£i l√™n th√†nh c√¥ng</p>
                <p className="text-green-600 text-sm mt-1">
                  ƒê√£ ph√¢n t√≠ch {resumeSections.length} ph·∫ßn t·ª´ CV c·ªßa b·∫°n
                </p>
              </div>
            )}
          </div>
          
          {/* Job Description Section */}
          <div className="space-y-6">
            <div className="flex items-center justify-between">
              <h2 className="text-xl font-semibold">M√¥ t·∫£ c√¥ng vi·ªác (t√πy ch·ªçn)</h2>
              {(jobDescriptionFile || jobDescriptionText) && (
                <Button 
                  onClick={handleClearJobDescription}
                  variant="outline" 
                  size="sm" 
                  className="gap-2 text-red-600 hover:text-red-700"
                >
                  <Trash2 className="h-4 w-4" />
                  X√≥a JD
                </Button>
              )}
            </div>
            
            <Tabs defaultValue="upload">
              <TabsList className="grid w-full grid-cols-2">
                <TabsTrigger value="upload">T·∫£i l√™n JD</TabsTrigger>
                <TabsTrigger value="paste">D√°n vƒÉn b·∫£n</TabsTrigger>
              </TabsList>
              
              <TabsContent value="upload" className="mt-4">
                <FileUpload
                  acceptedTypes=".pdf,.doc,.docx"
                  onFileUpload={handleJobDescriptionFileUpload}
                  label="T·∫£i l√™n m√¥ t·∫£ c√¥ng vi·ªác"
                />
              </TabsContent>
              
              <TabsContent value="paste" className="mt-4">
                <Textarea
                  placeholder="D√°n m√¥ t·∫£ c√¥ng vi·ªác v√†o ƒë√¢y..."
                  className="min-h-[300px]"
                  value={jobDescriptionText}
                  onChange={(e) => setJobDescriptionText(e.target.value)}
                />
              </TabsContent>
            </Tabs>
          </div>
        </div>
        
        <div className="flex flex-col sm:flex-row gap-4 justify-center mt-12">
          <Button onClick={handleEvaluate} size="lg" className="gap-2">
            <span>ƒê√°nh gi√° h·ªì s∆°</span>
            <ArrowRight className="h-4 w-4" />
          </Button>
          
          <Button onClick={handleStartMockInterview} variant="outline" size="lg" className="gap-2">
            <MessageSquare className="h-4 w-4" />
            <span>B·∫Øt ƒë·∫ßu ph·ªèng v·∫•n th·ª≠</span>
          </Button>
        </div>

        {resumeSections.length === 0 && (
          <div className="mt-8 p-4 bg-blue-50 border border-blue-200 rounded-lg">
            <p className="text-blue-800 text-center">
              üí° M·∫πo: B·∫°n c√≥ th·ªÉ b·∫Øt ƒë·∫ßu ph·ªèng v·∫•n th·ª≠ ngay c·∫£ khi ch∆∞a t·∫£i CV. 
              H·ªá th·ªëng s·∫Ω cho ph√©p b·∫°n ch·ªçn ng√†nh ngh·ªÅ ƒë·ªÉ t·∫°o c√¢u h·ªèi ph√π h·ª£p!
            </p>
          </div>
        )}
      </main>
    </div>
  );
};

export default Upload;
